name: 'Version Management'
description: 'Detect PR labels and calculate new version'

inputs:
  github-token:
    description: 'GitHub token for API access'
    required: true

outputs:
  release-type:
    description: 'Type of release (major, minor, patch)'
    value: ${{ steps.check_pr_label.outputs.release-type }}
  new-version:
    description: 'New version after bump'
    value: ${{ steps.new-version.outputs.result }}
  old-version:
    description: 'Current version'
    value: ${{ steps.old-version.outputs.result }}
  should-bump:
    description: 'Whether version should be bumped'
    value: ${{ steps.check_pr_label.outputs.should-bump }}

runs:
  using: 'composite'
  steps:
    - name: Check PR labels
      id: check_pr_label
      shell: bash
      env:
        PR_URL: ${{ github.event.pull_request.html_url }}
        GH_TOKEN: ${{ secrets.GH_AUTH_TOKEN }}
      run: |
        LABELS=$(gh pr view $PR_URL --json labels --jq '.labels[] | select((.name=="version:major") or (.name=="version:minor") or (.name=="version:patch")) | .name')
        NUMBER_OF_LABELS=$(echo "$LABELS" | wc -w)
        
        if [ "$NUMBER_OF_LABELS" -eq "1" ]; then
          # Extract version type from label (remove "version:" prefix)
          RELEASE_TYPE=$(echo "$LABELS" | sed 's/version://')
          echo "Found: $RELEASE_TYPE"
          echo "release-type=$RELEASE_TYPE" >> $GITHUB_OUTPUT
          echo "should-bump=true" >> $GITHUB_OUTPUT
        elif [ "$NUMBER_OF_LABELS" -gt "1" ]; then
          echo "::error ::Too many version labels: $(echo $LABELS | tr '\n' ' ')"
          exit 1
        else
          echo "No version labels found, skipping version bump"
          echo "release-type=patch" >> $GITHUB_OUTPUT
          echo "should-bump=false" >> $GITHUB_OUTPUT
        fi

    - name: Get current version
      id: old-version
      shell: bash
      run: |
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "Current version: $CURRENT_VERSION"
        echo "result=$CURRENT_VERSION" >> $GITHUB_OUTPUT

    - name: Calculate new version
      id: new-version
      shell: bash
      if: steps.check_pr_label.outputs.should-bump == 'true'
      env:
        PREV_VERSION: '${{ steps.old-version.outputs.result }}'
        RELEASE_TYPE: '${{ steps.check_pr_label.outputs.release-type }}'
      run: |
        echo "Previous version: $PREV_VERSION"
        echo "Release type: $RELEASE_TYPE"
        
        NEW_VERSION=$(node -e "
          const semver = require('semver');
          const current = '$PREV_VERSION';
          const bumpType = '$RELEASE_TYPE';
          console.log(semver.inc(current, bumpType));
        ")
        
        echo "New version: $NEW_VERSION"
        echo "result=$NEW_VERSION" >> $GITHUB_OUTPUT

    - name: Set default new version
      id: new-version-default
      shell: bash
      if: steps.check_pr_label.outputs.should-bump != 'true'
      run: |
        echo "result=${{ steps.old-version.outputs.result }}" >> $GITHUB_OUTPUT
