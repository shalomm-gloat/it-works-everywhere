name: 'Version Preview'
description: 'Show version preview for PRs without making changes'

inputs:
  github-token:
    description: 'GitHub token for API access'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Install semver dependency
      shell: bash
      run: yarn add semver

    - name: Get current version
      id: current-version
      shell: bash
      run: |
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "Current version: $CURRENT_VERSION"
        echo "result=$CURRENT_VERSION" >> $GITHUB_OUTPUT

    - name: Analyze commits and determine version bump
      id: commit-analysis
      shell: bash
      env:
        CURRENT_VERSION: '${{ steps.current-version.outputs.result }}'
      run: |
        # Get commits in this PR using a more robust approach
        # First try to get the base and head refs
        BASE_REF="${{ github.event.pull_request.base.ref }}"
        HEAD_REF="${{ github.event.pull_request.head.ref }}"
        
        echo "Base ref: $BASE_REF"
        echo "Head ref: $HEAD_REF"
        
        # Try different approaches to get commits
        if [ -n "$BASE_REF" ] && [ -n "$HEAD_REF" ]; then
          # Try using refs
          COMMITS=$(git log --oneline --no-merges origin/$BASE_REF..origin/$HEAD_REF 2>/dev/null || echo "")
          
          if [ -z "$COMMITS" ]; then
            # Fallback: try using the PR event data
            COMMITS=$(git log --oneline --no-merges ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} 2>/dev/null || echo "")
          fi
          
          if [ -z "$COMMITS" ]; then
            # Final fallback: get all commits in current branch
            COMMITS=$(git log --oneline --no-merges -10)
          fi
        else
          # Fallback: get recent commits
          COMMITS=$(git log --oneline --no-merges -10)
        fi
        
        echo "Commits to analyze:"
        echo "$COMMITS"
        
        # Analyze commit types
        MAJOR_COUNT=$(echo "$COMMITS" | grep -c "BREAKING CHANGE\|major" 2>/dev/null || echo "0")
        FEAT_COUNT=$(echo "$COMMITS" | grep -c "feat:" 2>/dev/null || echo "0")
        FIX_COUNT=$(echo "$COMMITS" | grep -c "fix:" 2>/dev/null || echo "0")
        
        # Ensure we have clean integer values
        MAJOR_COUNT=$(echo "$MAJOR_COUNT" | tr -d '\n')
        FEAT_COUNT=$(echo "$FEAT_COUNT" | tr -d '\n')
        FIX_COUNT=$(echo "$FIX_COUNT" | tr -d '\n')
        
        echo "Commits analysis:"
        echo "  Major changes: $MAJOR_COUNT"
        echo "  Features: $FEAT_COUNT"
        echo "  Fixes: $FIX_COUNT"
        
        # Determine bump type based on conventional commits
        if [ "$MAJOR_COUNT" -gt 0 ]; then
          RELEASE_TYPE="major"
          echo "Major version bump due to breaking changes"
        elif [ "$FEAT_COUNT" -gt 0 ]; then
          RELEASE_TYPE="minor"
          echo "Minor version bump due to new features"
        elif [ "$FIX_COUNT" -gt 0 ]; then
          RELEASE_TYPE="patch"
          echo "Patch version bump due to bug fixes"
        else
          RELEASE_TYPE="patch"
          echo "Default patch bump for changes"
        fi
        
        echo "release-type=$RELEASE_TYPE" >> $GITHUB_OUTPUT

    - name: Calculate preview version
      id: preview-version
      shell: bash
      env:
        CURRENT_VERSION: '${{ steps.current-version.outputs.result }}'
        RELEASE_TYPE: '${{ steps.commit-analysis.outputs.release-type }}'
      run: |
        NEW_VERSION=$(node -e "
          const semver = require('semver');
          const current = '$CURRENT_VERSION';
          const bumpType = '$RELEASE_TYPE';
          console.log(semver.inc(current, bumpType));
        ")
        echo "Preview version: $NEW_VERSION"
        echo "result=$NEW_VERSION" >> $GITHUB_OUTPUT

    - name: Create PR comment with version preview
      uses: actions/github-script@v6
      env:
        GH_TOKEN: ${{ inputs.github-token }}
      with:
        script: |
          // Determine environment suffix based on target branch
          const targetBranch = context.payload.pull_request.base.ref;
          let envSuffix = '';
          let willBump = false;
          
          if (targetBranch === 'main') {
            envSuffix = '-prod';
            willBump = true;
          } else if (targetBranch === 'staging') {
            envSuffix = '-stg';
            willBump = false;
          } else if (targetBranch === 'develop') {
            envSuffix = '-dev';
            willBump = false;
          } else {
            envSuffix = '-dev'; // default
            willBump = false;
          }

          let bumpMessage = '';
          if (willBump) {
            bumpMessage = `- Package.json version will be updated to **${{ steps.preview-version.outputs.result }}**`;
          } else {
            bumpMessage = `- Package.json version will remain **${{ steps.current-version.outputs.result }}** (no bump on ${targetBranch})`;
          }

          const message = `## ðŸ“‹ Version Preview

          **Current Version:** ${{ steps.current-version.outputs.result }}
          **Preview Version:** ${{ steps.preview-version.outputs.result }}
          **Target Branch:** ${targetBranch}
          **Bump Type:** ${{ steps.commit-analysis.outputs.release-type }} (based on conventional commits)

          ### What will happen on merge:
          ${bumpMessage}
          - Docker image will be tagged as **v${{ steps.current-version.outputs.result }}${envSuffix}**
          - Changes will be committed and pushed to ${targetBranch}

          > ðŸ’¡ This is a preview only. No changes will be made to this PR.`;

          // Create comment on PR
          github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: message
          });

          console.log('âœ… Version preview comment created on PR'); 
