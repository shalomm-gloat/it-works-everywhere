name: 'Notify Failure'
description: 'Send failure notifications for deployment'

inputs:
  environment:
    description: 'Environment that failed deployment'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Notify deployment failure
      uses: actions/github-script@v6
      with:
        script: |
          const environment = '${{ inputs.environment }}';
          const environmentName = environment.charAt(0).toUpperCase() + environment.slice(1);
          
          // Create failure notification
          const message = `‚ùå **${environmentName} Deployment Failed**
          
          **Repository**: ${context.repo.owner}/${context.repo.repo}
          **Branch**: ${context.ref_name}
          **Commit**: ${context.sha.substring(0, 7)}
          **Triggered by**: ${context.actor}
          **Workflow**: ${context.workflow}
          **Run ID**: ${context.runId}
          
          üö® Check the logs for details: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
          
          // Log notification
          console.log('üö® FAILURE NOTIFICATION:');
          console.log(message);
          
          // Create GitHub issue for failure tracking
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `üö® ${environmentName} Deployment Failed - ${context.sha.substring(0, 7)}`,
            body: `## ${environmentName} Deployment Failure
            
            **Repository**: ${context.repo.owner}/${context.repo.repo}
            **Branch**: ${context.ref_name}
            **Commit**: ${context.sha}
            **Triggered by**: ${context.actor}
            **Workflow**: ${context.workflow}
            **Run ID**: ${context.runId}
            
            **Logs**: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}
            
            ## Next Steps
            - [ ] Investigate failure cause
            - [ ] Fix issues in development
            - [ ] Re-run deployment
            - [ ] Consider rollback if needed`,
            labels: ['deployment-failure', 'urgent', 'ci-cd']
          });
          
          // Send email notification to PR author
          if (context.eventName === 'pull_request') {
            const prAuthor = context.payload.pull_request.user.login;
            const prAuthorEmail = context.payload.pull_request.user.email || `${prAuthor}@users.noreply.github.com`;
            
            console.log(`üìß Sending failure email to: ${prAuthorEmail}`);
            
            // In a real implementation, you would send an email here
            // For now, we'll log the email details
            const emailSubject = `‚ùå ${environmentName} Deployment Failed - ${context.repo.repo}`;
            const emailBody = `Hello ${prAuthor},\n\nYour deployment to ${environmentName} environment has failed.\n\n**Details:**\n- Repository: ${context.repo.owner}/${context.repo.repo}\n- Branch: ${context.ref_name}\n- Commit: ${context.sha.substring(0, 7)}\n- Environment: ${environmentName}\n- Workflow: ${context.workflow}\n- Run ID: ${context.runId}\n\n**Logs**: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}\n\nüö® Please check the logs and fix the issues before re-running the deployment.\n\nBest regards,\nCI/CD Pipeline`;
            
            console.log('Email Subject:', emailSubject);
            console.log('Email Body:', emailBody);
            console.log('Recipient:', prAuthorEmail);
          }
