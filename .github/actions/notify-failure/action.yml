name: 'Notify Failure'
description: 'Send failure notifications for deployment'

inputs:
  environment:
    description: 'Environment that failed deployment'
    required: true
  resend-api-key:
    description: 'Resend API key for email sending'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Notify deployment failure
      uses: actions/github-script@v6
      with:
        script: |
          const environment = '${{ inputs.environment }}';
          const environmentName = environment.charAt(0).toUpperCase() + environment.slice(1);
          
          // Create failure notification
          const message = `‚ùå **${environmentName} Deployment Failed**
          
          **Repository**: ${context.repo.owner}/${context.repo.repo}
          **Branch**: ${context.ref_name}
          **Commit**: ${context.sha.substring(0, 7)}
          **Triggered by**: ${context.actor}
          **Workflow**: ${context.workflow}
          **Run ID**: ${context.runId}
          
          üö® Check the logs for details: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
          
          // Log notification
          console.log('üö® FAILURE NOTIFICATION:');
          console.log(message);
          
          // Create GitHub issue for failure tracking
          try {
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üö® ${environmentName} Deployment Failed - ${context.sha.substring(0, 7)}`,
              body: `## ${environmentName} Deployment Failure
            
              **Repository**: ${context.repo.owner}/${context.repo.repo}
              **Branch**: ${context.ref_name}
              **Commit**: ${context.sha}
              **Triggered by**: ${context.actor}
              **Workflow**: ${context.workflow}
              **Run ID**: ${context.runId}
              
              **Logs**: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}
              
              ## Next Steps
              - [ ] Investigate failure cause
              - [ ] Fix issues in development
              - [ ] Re-run deployment
              - [ ] Consider rollback if needed`,
              labels: ['deployment-failure', 'urgent', 'ci-cd']
            });
            console.log('‚úÖ Failure issue created');
          } catch (error) {
            console.log('‚ö†Ô∏è Could not create failure issue (this is normal for some permissions)');
            console.log('Error details:', error.message);
          }

    - name: Send failure email notification
      uses: actions/github-script@v6
      with:
        script: |
          const environment = '${{ inputs.environment }}';
          const environmentName = environment.charAt(0).toUpperCase() + environment.slice(1);
          
          const emailData = {
            from: 'CI/CD Pipeline <noreply@your-domain.com>',
            to: ['shalommeoded@gmail.com'],
            subject: `‚ùå ${environmentName} Deployment Failed - ${context.repo.repo}`,
            html: `
              <h2>üö® Deployment Failed!</h2>
              <p>Your deployment to <strong>${environmentName}</strong> environment has failed.</p>
              
              <h3>Details:</h3>
              <ul>
                <li><strong>Repository:</strong> ${context.repo.owner}/${context.repo.repo}</li>
                <li><strong>Branch:</strong> ${context.ref_name}</li>
                <li><strong>Commit:</strong> ${context.sha.substring(0, 7)}</li>
                <li><strong>Environment:</strong> ${environmentName}</li>
                <li><strong>Workflow:</strong> ${context.workflow}</li>
                <li><strong>Run ID:</strong> ${context.runId}</li>
              </ul>
              
              <p><strong>Logs:</strong> <a href="${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}">View Logs</a></p>
              
              <p>üö® Please check the logs and fix the issues before re-running the deployment.</p>
              
              <p>Best regards,<br>CI/CD Pipeline</p>
            `
          };
          
          try {
            const response = await fetch('https://api.resend.com/emails', {
              method: 'POST',
              headers: {
                'Authorization': `Bearer ${{ inputs.resend-api-key }}`,
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(emailData)
            });
            
            if (response.ok) {
              console.log('‚úÖ Failure email sent via Resend');
            } else {
              console.log('‚ö†Ô∏è Failed to send email via Resend');
              console.log('Response:', await response.text());
            }
          } catch (error) {
            console.log('‚ö†Ô∏è Error sending email via Resend:', error.message);
          }
