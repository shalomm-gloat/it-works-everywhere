name: CI/CD Pipeline (Refactored with Official Actions)

# Explicit permissions for GitHub API access
permissions:
  contents: write
  issues: write
  pull-requests: write
  id-token: write

on:
  push:
    branches: [main, develop, staging, 'hotfix/*']
  pull_request:
    branches: [main, develop, staging, 'hotfix/*']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/it-works-on-my-machine

jobs:
  versioning:
    runs-on: ubuntu-latest
    name: 'Version Management'
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/hotfix/')
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || (github.ref == 'refs/heads/staging' && 'staging' || (startsWith(github.ref, 'refs/heads/hotfix/') && 'production' || 'development')) }}
    outputs:
      release-type: ${{ steps.version.outputs.release-type }}
      new-version: ${{ steps.version.outputs.new-version }}
      old-version: ${{ steps.version.outputs.old-version }}
      should-bump: ${{ steps.version.outputs.should-bump }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history needed for semantic versioning

      - name: Debug event info
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Branch: ${{ github.ref_name }}"

      - name: Version Management
        id: version
        uses: ./.github/actions/version-management
        with:
          github-token: ${{ github.token }}

      - name: Debug version outputs
        run: |
          echo "should-bump: ${{ steps.version.outputs.should-bump }}"
          echo "new-version: ${{ steps.version.outputs.new-version }}"
          echo "old-version: ${{ steps.version.outputs.old-version }}"
          echo "release-type: ${{ steps.version.outputs.release-type }}"

  version-preview:
    runs-on: ubuntu-latest
    name: 'Version Preview'
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history needed for commit analysis

      - name: Version Preview
        uses: ./.github/actions/version-preview
        with:
          github-token: ${{ github.token }}

  test:
    name: Test & Quality Gates
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Replace custom test-quality action with official actions
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'yarn'

    - name: Install dependencies
      run: yarn install --frozen-lockfile

    - name: Run linting
      run: yarn lint

    - name: Run tests
      run: yarn test

    - name: Security audit
      run: yarn audit --level moderate

    - name: Health check
      run: |
        chmod +x test.sh
        ./test.sh  # Assignment constraint: only functional testing available

    # Use custom notify-failure action (already uses official actions internally)
    - name: Notify failure
      if: failure()
      uses: ./.github/actions/notify-failure
      with:
        environment: development
        version: 'N/A'
        error: 'Test job failed - check workflow logs for details'
        brevo-smtp-user: ${{ secrets.BREVO_SMTP_USER }}
        brevo-smtp-key: ${{ secrets.BREVO_SMTP_KEY }}
        github-token: ${{ github.token }}
        email-to: ${{ github.event.pusher.email }}

  build:
    name: Build & Deploy
    runs-on: ubuntu-latest
    needs: [test, versioning]
    # CRITICAL: This environment field is required for GitHub Actions to access secrets and determine deployment target
    # Without this, Docker login fails because secrets are not accessible
    environment: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || (github.ref == 'refs/heads/develop' && 'staging' || (github.ref == 'refs/heads/staging' && 'staging' || (startsWith(github.ref, 'refs/heads/hotfix/') && 'production' || 'development')))) }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history needed for semantic versioning

    # Update version if needed
    - name: Bump package version
      if: needs.versioning.outputs.should-bump == 'true'
      uses: ./.github/actions/bump-package-version
      with:
        new-version: ${{ needs.versioning.outputs.new-version }}
        github-token: ${{ github.token }}



    # Use version from versioning job (conventional commits)
    - name: Set version for deployment
      id: version
      run: |
        if [ "${{ needs.versioning.outputs.should-bump }}" = "true" ]; then
          echo "version=${{ needs.versioning.outputs.new-version }}" >> $GITHUB_OUTPUT
        else
          echo "version=v$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
        fi

    # Custom action for environment mapping logic
    - name: Get target environment
      id: env
      uses: ./.github/actions/get-environment
      with:
        workflow-dispatch-env: ${{ github.event.inputs.environment }}

    # Set environment suffix for Docker tags
    - name: Set environment suffix
      id: env-suffix
      run: |
        case "${{ steps.env.outputs.environment }}" in
          "production")
            echo "suffix=" >> $GITHUB_OUTPUT
            ;;
          "staging")
            echo "suffix=-stg" >> $GITHUB_OUTPUT
            ;;
          *)
            echo "suffix=-dev" >> $GITHUB_OUTPUT
            ;;
        esac

    # Set environment for deployment
    - name: Set deployment environment
      run: |
        echo "DEPLOYMENT_ENV=${{ steps.env.outputs.environment }}" >> $GITHUB_ENV

    # Replace custom docker-build with official Docker actions
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}${{ steps.env-suffix.outputs.suffix }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        labels: |
          org.opencontainers.image.version=${{ steps.version.outputs.version }}${{ steps.env-suffix.outputs.suffix }}
          org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
          org.opencontainers.image.revision=${{ github.sha }}

    # Platform-agnostic deployment with extensibility
    - name: Deploy application
      id: deploy
      uses: ./.github/actions/deploy
      with:
        environment: ${{ env.DEPLOYMENT_ENV }}
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}${{ steps.env-suffix.outputs.suffix }}
        version: ${{ steps.version.outputs.version }}${{ steps.env-suffix.outputs.suffix }}
        platform: 'simulated'  # Can be changed to: aws-ecs, simulated

    # Use custom notify-success action (already uses official actions internally)
    - name: Notify success
      if: success()
      uses: ./.github/actions/notify-success
      with:
        environment: ${{ env.DEPLOYMENT_ENV }}
        registry: ${{ env.REGISTRY }}
        image-name: ${{ env.IMAGE_NAME }}
        version: ${{ steps.version.outputs.version }}${{ steps.env-suffix.outputs.suffix }}
        brevo-smtp-user: ${{ secrets.BREVO_SMTP_USER }}
        brevo-smtp-key: ${{ secrets.BREVO_SMTP_KEY }}
        github-token: ${{ github.token }}
        email-to: ${{ github.event.pusher.email }}

    # Use custom notify-failure action (already uses official actions internally)
    - name: Notify failure
      if: failure()
      uses: ./.github/actions/notify-failure
      with:
        environment: ${{ env.DEPLOYMENT_ENV }}
        version: ${{ steps.version.outputs.version }}${{ steps.env-suffix.outputs.suffix }}
        error: 'Deployment failed - check workflow logs for details'
        brevo-smtp-user: ${{ secrets.BREVO_SMTP_USER }}
        brevo-smtp-key: ${{ secrets.BREVO_SMTP_KEY }}
        github-token: ${{ github.token }}
        email-to: ${{ github.event.pusher.email }}
