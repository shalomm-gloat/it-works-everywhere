name: CI/CD Pipeline (Refactored with Official Actions)

on:
  push:
    branches: [main, develop, staging]
  pull_request:
    branches: [main, develop, staging]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/it-works-on-my-machine

jobs:
  test:
    name: Test & Quality Gates
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Replace custom test-quality action with official actions
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'yarn'

    - name: Install dependencies
      run: yarn install --frozen-lockfile

    - name: Run linting
      run: yarn lint

    - name: Run tests
      run: yarn test

    - name: Security audit
      run: yarn audit --level moderate

    - name: Health check
      run: |
        chmod +x test.sh
        ./test.sh  # Assignment constraint: only functional testing available

    # Use custom notify-failure action (already uses official actions internally)
    - name: Notify failure
      if: failure()
      uses: ./.github/actions/notify-failure
      with:
        environment: development
        version: 'N/A'
        brevo-smtp-user: ${{ secrets.BREVO_SMTP_USER }}
        brevo-smtp-key: ${{ secrets.BREVO_SMTP_KEY }}

  build:
    name: Build & Deploy
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging' || github.event_name == 'workflow_dispatch'
    environment: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || (github.ref == 'refs/heads/develop' && 'staging' || (github.ref == 'refs/heads/staging' && 'staging' || 'development'))) }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history needed for semantic versioning

    # Automatic version bumping based on PR labels
    - name: Bump version
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging' || (github.event_name == 'pull_request' && (contains(github.event.pull_request.labels.*.name, 'version:major') || contains(github.event.pull_request.labels.*.name, 'version:minor') || contains(github.event.pull_request.labels.*.name, 'version:patch')))
      uses: ./.github/actions/bump-version
      with:
        github-token: ${{ github.token }}

    # Custom action for semantic versioning with environment-specific suffixes
    - name: Generate version tag
      id: version
      uses: ./.github/actions/generate-version

    # Custom action for environment mapping logic
    - name: Get target environment
      id: env
      uses: ./.github/actions/get-environment
      with:
        workflow-dispatch-env: ${{ github.event.inputs.environment }}

    # Set environment for deployment
    - name: Set deployment environment
      run: |
        echo "DEPLOYMENT_ENV=${{ steps.env.outputs.environment }}" >> $GITHUB_ENV

    # Replace custom docker-build with official Docker actions
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        labels: |
          org.opencontainers.image.version=${{ steps.version.outputs.version }}
          org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
          org.opencontainers.image.revision=${{ github.sha }}

    # Platform-agnostic deployment with extensibility
    - name: Deploy application
      id: deploy
      uses: ./.github/actions/deploy
      with:
        environment: ${{ env.DEPLOYMENT_ENV }}
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
        version: ${{ steps.version.outputs.version }}
        platform: 'simulated'  # Can be changed to: aws-ecs, simulated

    # Use custom notify-success action (already uses official actions internally)
    - name: Notify success
      if: success()
      uses: ./.github/actions/notify-success
      with:
        environment: ${{ env.DEPLOYMENT_ENV }}
        registry: ${{ env.REGISTRY }}
        image-name: ${{ env.IMAGE_NAME }}
        version: ${{ steps.version.outputs.version }}
        brevo-smtp-user: ${{ secrets.BREVO_SMTP_USER }}
        brevo-smtp-key: ${{ secrets.BREVO_SMTP_KEY }}

    # Use custom notify-failure action (already uses official actions internally)
    - name: Notify failure
      if: failure()
      uses: ./.github/actions/notify-failure
      with:
        environment: ${{ steps.env.outputs.environment }}
        version: ${{ steps.version.outputs.version }}
        brevo-smtp-user: ${{ secrets.BREVO_SMTP_USER }}
        brevo-smtp-key: ${{ secrets.BREVO_SMTP_KEY }}
