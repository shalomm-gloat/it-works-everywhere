name: CI/CD Pipeline (Refactored with Official Actions)

on:
  push:
    branches: [main, develop, staging]
  pull_request:
    branches: [main, develop, staging]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/it-works-on-my-machine

jobs:
  test:
    name: Test & Quality Gates
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Replace custom test-quality action with official actions
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Run tests
      run: npm test

    - name: Security audit
      run: npm audit --audit-level=moderate

    - name: Health check
      run: |
        chmod +x test.sh
        ./test.sh

    # Use custom notify-failure action (already uses official actions internally)
    - name: Notify failure
      if: failure()
      uses: ./.github/actions/notify-failure
      with:
        environment: development
        version: 'N/A'
        brevo-smtp-user: ${{ secrets.BREVO_SMTP_USER }}
        brevo-smtp-key: ${{ secrets.BREVO_SMTP_KEY }}

  build:
    name: Build & Deploy
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging' || github.event_name == 'workflow_dispatch'
    environment: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || (github.ref == 'refs/heads/develop' && 'staging' || (github.ref == 'refs/heads/staging' && 'staging' || 'development'))) }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Keep custom version generation (business logic)
    - name: Generate version tag
      id: version
      uses: ./.github/actions/generate-version

    # Keep custom environment detection (business logic)
    - name: Get target environment
      id: env
      uses: ./.github/actions/get-environment
      with:
        workflow-dispatch-env: ${{ github.event.inputs.environment }}

    # Replace custom docker-build with official Docker actions
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=${{ steps.version.outputs.version }}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    # Deploy application (platform-agnostic)
    - name: Deploy application
      run: |
        echo "ðŸš€ Deploying to ${{ steps.env.outputs.environment }} environment..."
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}"
        
        # Platform-specific deployment logic can be added here
        # Examples:
        # - Kubernetes: kubectl apply -f k8s/
        # - Docker Swarm: docker stack deploy
        # - AWS ECS: aws ecs update-service
        # - Azure: az container create
        # - Google Cloud: gcloud run deploy
        
        echo "âœ… Deployment to ${{ steps.env.outputs.environment }} completed successfully"
        
        # Add deployment summary
        echo "## ðŸš€ Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: ${{ steps.env.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Image**: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: âœ… Success" >> $GITHUB_STEP_SUMMARY

    # Use custom notify-success action (already uses official actions internally)
    - name: Notify success
      if: success()
      uses: ./.github/actions/notify-success
      with:
        environment: ${{ steps.env.outputs.environment }}
        registry: ${{ env.REGISTRY }}
        image-name: ${{ env.IMAGE_NAME }}
        version: ${{ steps.version.outputs.version }}
        brevo-smtp-user: ${{ secrets.BREVO_SMTP_USER }}
        brevo-smtp-key: ${{ secrets.BREVO_SMTP_KEY }}

    # Use custom notify-failure action (already uses official actions internally)
    - name: Notify failure
      if: failure()
      uses: ./.github/actions/notify-failure
      with:
        environment: ${{ steps.env.outputs.environment }}
        version: ${{ steps.version.outputs.version }}
        brevo-smtp-user: ${{ secrets.BREVO_SMTP_USER }}
        brevo-smtp-key: ${{ secrets.BREVO_SMTP_KEY }}
